#include "generate/column_string_hash.h"

#define BCSH_MALLOC_FAILURE						\
MALLOC_FAILURE_MESSAGE("build_column_string_hash")

void
build_column_string_hash(void *arg)
{
	struct Column *const restrict column
	= (struct Column *const restrict) arg;

	const size_t size_hash = column->spec->string.length_scale.fixed + 1lu;

	/* enough even if odd length */
	const size_t length_octets = size_hash / 2lu;

	thread_try_catch_open(&free_nullify_cleanup,
			      &column->contents);

	column->contents = malloc(sizeof(uint8_t));

	if (column->contents == NULL) {
		handler_closure_call(&column->fail_cl,
				     BCSH_MALLOC_FAILURE);
		__builtin_unreachable();
	}


	thread_try_catch_close();
}

/* hash_t hash_bytes(byte_t *bytes, */
/* 		  const size_t length, */
/* 		  const hash_t m_prime) */
/* { */

/* 	/1* size_t rem_words = length / sizeof(hash_t); *1/ */
/* 	size_t rem_bytes = length % sizeof(hash_t); */

/* 	ptrdiff_t i = length - rem_bytes; */

/* 	hash_t *word = (hash_t *) bytes; */

/* 	hash_t hash = (word[i] << (sizeof(hash_t) - rem_bytes)) & m_prime; */

/* 	i -= rem_bytes; */

/* 	if (i < 0l) */
/* 		return hash; */

/* 	const hash_t base_mod_size = HASH_MAX & m_prime; */

/* 	do { */
/* 		hash += (base_mod_size * (word[i] & m_prime)) & m_prime; */
/* 		i -= sizeof(hash_t); */

/* 	} while (i >= 0l); */

/* 	return hash; */
/* } */
