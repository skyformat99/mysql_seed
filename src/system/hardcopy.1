     specifying the O_CREAT flag).  In this case, open() and openat() require an additional
     argument mode_t mode; the file is created with mode mode as described in chmod(2) and mod-
     ified by the process' umask value (see umask(2)).

     The openat() function is equivalent to the open() function except in the case where the
     path specifies a relative path.  In this case the file to be opened is determined relative
     to the directory associated with the file descriptor fd instead of the current working
     directory.  The oflag argument and the optional fourth argument correspond exactly to the
     arguments for open().  If openat() is passed the special value AT_FDCWD in the fd argu-
     ment, the current working directory is used and the behavior is identical to a call to
     open().

     The flags specified for the oflag argument are formed by or'ing the following values:

           O_RDONLY        open for reading only
           O_WRONLY        open for writing only
           O_RDWR          open for reading and writing
           O_NONBLOCK      do not block on open or for data to become available
           O_APPEND        append on each write
           O_CREAT         create file if it does not exist
           O_TRUNC         truncate size to 0
           O_EXCL          error if O_CREAT and the file exists
           O_SHLOCK        atomically obtain a shared lock
           O_EXLOCK        atomically obtain an exclusive lock
           O_NOFOLLOW      do not follow symlinks
           O_SYMLINK       allow open of symlinks
           O_EVTONLY       descriptor requested for event notifications only
           O_CLOEXEC       mark as close-on-exec

     Opening a file with O_APPEND set causes each write on the file to be appended to the end.
     If O_TRUNC is specified and the file exists, the file is truncated to zero length.  If
     O_EXCL is set with O_CREAT and the file already exists, open() returns an error.  This may
     be used to implement a simple exclusive-access locking mechanism.  If O_EXCL is set with
     O_CREAT and the last component of the pathname is a symbolic link, open() will fail even
     if the symbolic link points to a non-existent name.

     If the O_NONBLOCK flag is specified, do not wait for the device or file to be ready or
     available.  If the open() call would result in the process being blocked for some reason
     (e.g., waiting for carrier on a dialup line), open() returns immediately.  This flag also
     has the effect of making all subsequent I/O on the open file non-blocking.

     When opening a file, a lock with flock(2) semantics can be obtained by setting O_SHLOCK
     for a shared lock, or O_EXLOCK for an exclusive lock.  If creating a file with O_CREAT,
     the request for the lock will never fail (provided that the underlying filesystem supports
     locking).

     If O_NOFOLLOW is used in the mask and the target file passed to open() is a symbolic link
     then the open() will fail.

     If O_SYMLINK is used in the mask and the target file passed to open() is a symbolic link
     then the open() will be for the symbolic link itself, not what it links to.

:
